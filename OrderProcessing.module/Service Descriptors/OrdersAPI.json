type filter {
  "openapi": "3.0.0",
  "info": {
    "title": "Orders API",
    "version": "v1",
    "description": "API for managing customer orders."
  },
  "servers": [
    {
      "url": "http://localhost:8080/api"
    }
  ],
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product."
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product ordered.",
            "minimum": 1
          }
        }
      },
      "OrderRequest": {
        "type": "object",
        "required": [
          "customerId",
          "products"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Identifier of the customer placing the order."
          },
          "products": {
            "type": "array",
            "description": "List of products in the order.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order.",
            "readOnly": true
          },
          "customerId": {
            "type": "string",
            "description": "Identifier of the customer."
          },
          "orderDate": {
            "type": "string",
            "description": "Date and time the order was placed.",
            "format": "date-time",
            "readOnly": true
          },
          "products": {
            "type": "array",
            "description": "List of products in the order.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "status": {
            "type": "string",
            "description": "Current status of the order.",
            "enum": [
              "Pending",
              "Processing",
              "Shipped",
              "Cancelled"
            ]
          }
        }
      },
      "OrderStatusUpdateRequest": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "New status for the order.",
            "enum": [
              "Processing",
              "Shipped",
              "Cancelled"
            ]
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code."
          },
          "message": {
            "type": "string",
            "description": "Error message."
          }
        }
      }
    },
    "parameters": {
      "orderIdParam": {
        "name": "orderId",
        "in": "path",
        "required": true,
        "description": "Identifier of the order to retrieve or update.",
        "schema": {
          "type": "string"
        }
      },
      "customerIdParam": {
        "name": "customerId",
        "in": "path",
        "required": true,
        "description": "Identifier of the customer to retrieve orders for.",
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "paths": {
    "/orders": {
      "post": {
        "summary": "Place a new order.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully. Returns the ID of the new order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "description": "The newly created order ID."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated backend failure).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "summary": "Retrieve details of a specific order.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated database failure).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update the status of an existing order.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully."
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated backend failure).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/customer/{customerId}": {
      "get": {
        "summary": "Retrieve all orders for a specific customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customer orders retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Customer not found (if you choose to implement this level of simulation).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated database failure).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}
