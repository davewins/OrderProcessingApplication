# catalog-info.yaml in your GitHub repository (e.g., davewins/OrderProcessingApplication)

# --- ENTITY 1: Component (Your Application) ---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: OrderProcessingApplication
  description: A BusinessWorks application responsible for processing customer orders, interacting with TIBCO EMS and a transactional database.
  annotations:
    github.com/project-slug: davewins/OrderProcessingApplication
    backstage.io/techdocs-ref: dir:.
    tibco.com/bwce-version: 6.x.x
    tibco.com/ems-connection-factory: "OrderProcessingCF"
  tags:
    - tibco
    - businessworks
    - integration
    - order-processing
    - ems
    - database
spec:
  type: service
  lifecycle: production
  owner: group:default/order-processing-team
  system: order-management-system
  domain: sales-operations
  dependsOn:
    - resource:default/tibco-ems-broker-1
    - resource:default/order-database-primary
  providesApis:
    - order-processing-api

---
# --- ENTITY 2: Resource (TIBCO EMS Broker) ---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: tibco-ems-broker-1
  description: Primary TIBCO EMS Broker for order processing queues.
  tags:
    - tibco
    - ems
    - messaging
spec:
  type: messaging-broker
  owner: group:default/middleware-team
  system: messaging-infrastructure
  domain: enterprise-integration

---
# --- ENTITY 3: Resource (Order Database) ---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: order-database-primary
  description: PostgreSQL database for storing order data.
  annotations:
    db.com/connection-string: "jdbc:postgresql://orderdb:5432/orders"
    db.com/type: "postgresql"
  tags:
    - database
    - postgresql
    - orders
spec:
  type: database
  owner: group:default/data-platform-team
  system: order-management-system
  domain: sales-operations

---
# --- ENTITY 4: System (Order Management System) ---
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: order-management-system
  description: Orchestrates the end-to-end processing and fulfillment of customer orders.
  tags:
    - order-management
    - core-business
spec:
  owner: group:default/sales-operations-lead # Updated owner
  domain: sales-operations

---
# --- ENTITY 5: Domain (Sales Operations) ---
apiVersion: backstage.io/v1alpha1
kind: Domain
metadata:
  name: sales-operations
  description: Represents the business domain encompassing all sales and order fulfillment activities.
  tags:
    - business-domain
    - sales
    - operations
spec:
  owner: group:default/business-leadership # Updated owner

---
# --- ENTITY 6: API (Order Processing API) ---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: order-processing-api
  description: API for placing and managing customer orders.
  tags:
    - order-processing
    - api
    - rest
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  type: openapi
  lifecycle: production
  owner: group:default/order-processing-team
  definition: |
    {
      "swagger" : "2.0",
      "info" : {
        "version" : "1.0",
        "title" : "OrderProcessing"
      },
      "host" : "bwce.vewins.co.uk:443",
      "basePath" : "/tibco/apps/d0mrfgqd9jcaeh9qlih0/Orders",
      "schemes" : [ "https" ],
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ],
      "paths" : {
        "/api/orders/customer/{customerId}" : {
          "get" : {
            "tags" : [ "Orders" ],
            "summary" : "Retrieve all orders for a specific customer.",
            "parameters" : [ {
              "name" : "customerId",
              "in" : "path",
              "description" : "Identifier of the customer to retrieve orders for.",
              "required" : true,
              "type" : "string"
            } ],
            "responses" : {
              "200" : {
                "description" : "List of customer orders retrieved successfully.",
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Order"
                  }
                }
              },
              "500" : {
                "description" : "Internal server error (e.g., simulated database failure).",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              },
              "404" : {
                "description" : "Customer not found (if you choose to implement this level of simulation).",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              }
            }
          }
        },
        "/api/orders" : {
          "post" : {
            "tags" : [ "Orders" ],
            "summary" : "Place a new order.",
            "parameters" : [ {
              "in" : "body",
              "name" : "OrderRequest",
              "description" : "Order details to create.",
              "required" : true,
              "schema" : {
                "$ref" : "#/definitions/OrderRequest"
              }
            } ],
            "responses" : {
              "200" : {
                "description" : "Sample Description",
                "schema" : {
                  "$ref" : "#/definitions/OrderCreationResponse"
                }
              },
              "400" : {
                "description" : "Invalid request payload.",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              },
              "500" : {
                "description" : "Internal server error (e.g., simulated backend failure).",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              }
            }
          }
        },
        "/api/orders/{orderId}" : {
          "get" : {
            "tags" : [ "Orders" ],
            "summary" : "Retrieve details of a specific order.",
            "parameters" : [ {
              "name" : "orderId",
              "in" : "path",
              "description" : "Identifier of the order to retrieve.",
              "required" : true,
              "type" : "string"
            } ],
            "responses" : {
              "500" : {
                "description" : "Internal server error (e.g., simulated database failure).",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              },
              "404" : {
                "description" : "Order not found.",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              },
              "200" : {
                "description" : "Order details retrieved successfully.",
                "schema" : {
                  "$ref" : "#/definitions/Order"
                }
              }
            }
          },
          "put" : {
            "tags" : [ "Orders" ],
            "summary" : "Update the status of an existing order.",
            "parameters" : [ {
              "name" : "orderId",
              "in" : "path",
              "description" : "Identifier of the order to retrieve.",
              "required" : true,
              "type" : "string"
            }, {
              "in" : "body",
              "name" : "OrderStatusUpdateRequest",
              "description" : "New status for the order.",
              "required" : true,
              "schema" : {
                "$ref" : "#/definitions/OrderStatusUpdateRequest"
              }
            } ],
            "responses" : {
              "500" : {
                "description" : "Internal server error (e.g., simulated backend failure).",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              },
              "200" : {
                "description" : "Order status updated successfully."
              },
              "404" : {
                "description" : "Order not found.",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              },
              "400" : {
                "description" : "Invalid request payload.",
                "schema" : {
                  "$ref" : "#/definitions/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "definitions" : {
        "Product" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "Name of the product."
            },
            "quantity" : {
              "type" : "integer",
              "description" : "Quantity of the product ordered.",
              "minimum" : 1
            }
          }
        },
        "OrderRequest" : {
          "type" : "object",
          "required" : [ "customerId", "products" ],
          "properties" : {
            "customerId" : {
              "type" : "string",
              "description" : "Identifier of the customer placing the order."
            },
            "products" : {
              "type" : "array",
              "description" : "List of products in the order.",
              "items" : {
                "$ref" : "#/definitions/Product"
              }
            }
          }
        },
        "Order" : {
          "type" : "object",
          "properties" : {
            "orderId" : {
              "type" : "string",
              "description" : "Unique identifier of the order.",
              "readOnly" : true
            },
            "customerId" : {
              "type" : "string",
              "description" : "Identifier of the customer."
            },
            "orderDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date and time the order was placed.",
              "readOnly" : true
            },
            "products" : {
              "type" : "array",
              "description" : "List of products in the order.",
              "items" : {
                "$ref" : "#/definitions/Product"
              }
            },
            "status" : {
              "type" : "string",
              "description" : "Current status of the order.",
              "enum" : [ "Pending", "Processing", "Shipped", "Cancelled" ]
            }
          }
        },
        "OrderStatusUpdateRequest" : {
          "type" : "object",
          "required" : [ "status" ],
          "properties" : {
            "status" : {
              "type" : "string",
              "description" : "New status for the order.",
              "enum" : [ "Processing", "Shipped", "Cancelled" ]
            }
          }
        },
        "ErrorResponse" : {
          "type" : "object",
          "properties" : {
            "code" : {
              "type" : "integer",
              "description" : "Error code."
            },
            "message" : {
              "type" : "string",
              "description" : "Error message."
            }
          }
        },
        "OrderCreationResponse" : {
          "type" : "object",
          "properties" : {
            "orderId" : {
              "type" : "string",
              "description" : "The newly created order ID."
            }
          }
        }
      }
    }

---
# --- ENTITY 8: Group (Development Department) ---
apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: development-department
  description: The overarching department for all development teams.
  tags:
    - department
    - engineering
spec:
  type: department
  profile:
    displayName: Development Department
    email: dev-dept@example.com
  parent: default/business-leadership # Parent is the Business Leadership Group
  children: # Child groups will be order-processing-team and middleware-team
    - group:default/order-processing-team
    - group:default/middleware-team
  members:
    - user:default/dev-dept-head # Example user for the head of this department

---
# --- ENTITY 9: Group (Sales Operations Lead) ---
apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: sales-operations-lead
  description: The leadership team responsible for the Sales Operations Domain.
  tags:
    - leadership
    - sales
    - operations
spec:
  type: team
  profile:
    displayName: Sales Operations Lead
    email: sales-ops-lead@example.com
  parent: default/business-leadership # Parent is the Business Leadership Group
  children: [] # No child groups defined for this example
  members:
    - user:default/sales-lead-1 # Example user for a sales lead

---
# --- ENTITY 10: Group (Business Leadership) ---
apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: business-leadership
  description: Top-level leadership group overseeing various business domains.
  tags:
    - leadership
    - executive
spec:
  type: department
  profile:
    displayName: Business Leadership
    email: leadership@example.com
  parent: default/root # You might have a "root" or "organization" group
  children: # Child groups would be departments or domain leads
    - group:default/sales-operations-lead
    - group:default/development-department
  members:
    - user:default/biz-leader-1 # Example user for a business leader

---
# --- ENTITY 11: User (davewins) ---
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: davewins
  tags:
    - developer
spec:
  profile:
    displayName: Dave Wins
    email: dave.wins@example.com
    picture: https://example.com/avatars/davewins.jpg
  memberOf:
    - group:default/order-processing-team

---
# --- ENTITY 12: User (another-developer) ---
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: another-developer
  tags:
    - developer
spec:
  profile:
    displayName: Another Developer
    email: another.developer@example.com
  memberOf:
    - group:default/order-processing-team

---
# --- ENTITY 13: User (middleware-engineer1) ---
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: middleware-engineer1
  tags:
    - engineer
    - middleware
spec:
  profile:
    displayName: Middleware Engineer 1
    email: mw.engineer1@example.com
  memberOf:
    - group:default/middleware-team

---
# --- ENTITY 14: User (dev-dept-head) ---
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: dev-dept-head
  tags:
    - leadership
    - engineering
spec:
  profile:
    displayName: Development Department Head
    email: dev.head@example.com
  memberOf:
    - group:default/development-department

---
# --- ENTITY 15: User (sales-lead-1) ---
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: sales-lead-1
  tags:
    - leadership
    - sales
spec:
  profile:
    displayName: Sales Lead 1
    email: sales.lead1@example.com
  memberOf:
    - group:default/sales-operations-lead

---
# --- ENTITY 16: User (biz-leader-1) ---
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: biz-leader-1
  tags:
    - leadership
    - executive
spec:
  profile:
    displayName: Business Leader 1
    email: biz.leader1@example.com
  memberOf:
    - group:default/business-leadership